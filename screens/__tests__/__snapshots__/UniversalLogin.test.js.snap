// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`Login Page With Universal Auth0 Login Matches snapshots 1`] = `
<RCTScrollView
  contentContainerStyle={
    {
      "flexGrow": 1,
    }
  }
>
  <View>
    <View
      style={
        {
          "flex": 1,
          "justifyContent": "space-around",
          "paddingHorizontal": 20,
        }
      }
    >
      <Text
        style={
          {
            "fontSize": 16,
            "marginBottom": 10,
            "marginTop": 10,
            "textAlign": "center",
            "textTransform": "uppercase",
          }
        }
      >
        Language code
      </Text>
      <View
        style={
          [
            {
              "alignSelf": "stretch",
            },
            undefined,
          ]
        }
      >
        <View
          accessibilityState={
            {
              "busy": undefined,
              "checked": undefined,
              "disabled": undefined,
              "expanded": undefined,
              "selected": undefined,
            }
          }
          accessibilityValue={
            {
              "max": undefined,
              "min": undefined,
              "now": undefined,
              "text": undefined,
            }
          }
          accessible={true}
          collapsable={false}
          focusable={true}
          onClick={[Function]}
          onResponderGrant={[Function]}
          onResponderMove={[Function]}
          onResponderRelease={[Function]}
          onResponderTerminate={[Function]}
          onResponderTerminationRequest={[Function]}
          onStartShouldSetResponder={[Function]}
          style={
            {
              "opacity": 1,
            }
          }
          testID="langInput"
        >
          <View
            pointerEvents="box-only"
          >
            <TextInput
              editable={false}
              style={
                [
                  undefined,
                  {
                    "color": "#c7c7cd",
                  },
                ]
              }
              testID="text_input"
              value="Select a language"
            />
          </View>
        </View>
      </View>
      <Text
        style={
          {
            "fontSize": 16,
            "marginBottom": 10,
            "marginTop": 10,
            "textAlign": "center",
            "textTransform": "uppercase",
          }
        }
      >
        Available envs
      </Text>
      <View
        style={
          [
            {
              "alignSelf": "stretch",
            },
            undefined,
          ]
        }
      >
        <View
          accessibilityState={
            {
              "busy": undefined,
              "checked": undefined,
              "disabled": undefined,
              "expanded": undefined,
              "selected": undefined,
            }
          }
          accessibilityValue={
            {
              "max": undefined,
              "min": undefined,
              "now": undefined,
              "text": undefined,
            }
          }
          accessible={true}
          collapsable={false}
          focusable={true}
          onClick={[Function]}
          onResponderGrant={[Function]}
          onResponderMove={[Function]}
          onResponderRelease={[Function]}
          onResponderTerminate={[Function]}
          onResponderTerminationRequest={[Function]}
          onStartShouldSetResponder={[Function]}
          style={
            {
              "opacity": 1,
            }
          }
          testID="envInput"
        >
          <View
            pointerEvents="box-only"
          >
            <TextInput
              editable={false}
              style={
                [
                  undefined,
                  {
                    "color": "#c7c7cd",
                  },
                ]
              }
              testID="text_input"
              value="Select a environment"
            />
          </View>
        </View>
      </View>
      <Text
        style={
          {
            "marginBottom": 10,
            "textAlign": "center",
            "textTransform": "uppercase",
          }
        }
      >
        Regions
      </Text>
      <View
        style={
          [
            {
              "alignSelf": "stretch",
            },
            undefined,
          ]
        }
      >
        <View
          accessibilityState={
            {
              "busy": undefined,
              "checked": undefined,
              "disabled": undefined,
              "expanded": undefined,
              "selected": undefined,
            }
          }
          accessibilityValue={
            {
              "max": undefined,
              "min": undefined,
              "now": undefined,
              "text": undefined,
            }
          }
          accessible={true}
          collapsable={false}
          focusable={true}
          onClick={[Function]}
          onResponderGrant={[Function]}
          onResponderMove={[Function]}
          onResponderRelease={[Function]}
          onResponderTerminate={[Function]}
          onResponderTerminationRequest={[Function]}
          onStartShouldSetResponder={[Function]}
          style={
            {
              "opacity": 1,
            }
          }
          testID="regionInput"
        >
          <View
            pointerEvents="box-only"
          >
            <TextInput
              editable={false}
              style={
                [
                  undefined,
                  {
                    "color": "#c7c7cd",
                  },
                ]
              }
              testID="text_input"
              value="Select a region"
            />
          </View>
        </View>
      </View>
      <Text
        style={
          {
            "marginBottom": 10,
            "textAlign": "center",
            "textTransform": "uppercase",
          }
        }
      >
        Apps
      </Text>
      <View
        style={
          [
            {
              "alignSelf": "stretch",
            },
            undefined,
          ]
        }
      >
        <View
          accessibilityState={
            {
              "busy": undefined,
              "checked": undefined,
              "disabled": undefined,
              "expanded": undefined,
              "selected": undefined,
            }
          }
          accessibilityValue={
            {
              "max": undefined,
              "min": undefined,
              "now": undefined,
              "text": undefined,
            }
          }
          accessible={true}
          collapsable={false}
          focusable={true}
          onClick={[Function]}
          onResponderGrant={[Function]}
          onResponderMove={[Function]}
          onResponderRelease={[Function]}
          onResponderTerminate={[Function]}
          onResponderTerminationRequest={[Function]}
          onStartShouldSetResponder={[Function]}
          style={
            {
              "opacity": 1,
            }
          }
          testID="appInput"
        >
          <View
            pointerEvents="box-only"
          >
            <TextInput
              editable={false}
              style={
                [
                  undefined,
                  {
                    "color": "#c7c7cd",
                  },
                ]
              }
              testID="text_input"
              value="Select an app"
            />
          </View>
        </View>
      </View>
      <View
        style={
          {
            "flex": 1,
            "flexDirection": "row",
          }
        }
      >
        <Text>
          

          Remember auth session:
        </Text>
        <View>
          <View
            accessibilityRole="checkbox"
            accessibilityState={
              {
                "checked": false,
                "disabled": false,
              }
            }
            accessibilityValue={
              {
                "text": "off",
              }
            }
            accessible={true}
            pointerEvents="auto"
            testID="authCheck"
          >
            <RNCCheckbox
              accessibilityLabel="authCheck"
              forwardedRef={null}
              onValueChange={[Function]}
              style={
                [
                  {
                    "backgroundColor": "transparent",
                    "height": 32,
                    "width": 32,
                  },
                  undefined,
                ]
              }
              value={false}
            />
          </View>
        </View>
      </View>
      <View
        style={
          {
            "flex": 1,
            "flexDirection": "row",
          }
        }
      >
        <View
          style={
            {
              "flex": 1,
              "flexDirection": "row",
            }
          }
        >
          <Text>
            InnerSkipLogin:
          </Text>
          <View>
            <View
              accessibilityRole="checkbox"
              accessibilityState={
                {
                  "checked": false,
                  "disabled": false,
                }
              }
              accessibilityValue={
                {
                  "text": "off",
                }
              }
              accessible={true}
              pointerEvents="auto"
              testID="enableInnerSkipLogin"
            >
              <RNCCheckbox
                accessibilityLabel="enableInnerSkipLogin"
                forwardedRef={null}
                onValueChange={[Function]}
                style={
                  [
                    {
                      "backgroundColor": "transparent",
                      "height": 32,
                      "width": 32,
                    },
                    undefined,
                  ]
                }
              />
            </View>
          </View>
        </View>
        <View
          style={
            {
              "flex": 1,
              "flexDirection": "row",
            }
          }
        >
          <Text>
            SkipLogin:
          </Text>
          <View>
            <View
              accessibilityRole="checkbox"
              accessibilityState={
                {
                  "checked": false,
                  "disabled": false,
                }
              }
              accessibilityValue={
                {
                  "text": "off",
                }
              }
              accessible={true}
              pointerEvents="auto"
              testID="enableSkipLogin"
            >
              <RNCCheckbox
                accessibilityLabel="enableSkipLogin"
                forwardedRef={null}
                onValueChange={[Function]}
                style={
                  [
                    {
                      "backgroundColor": "transparent",
                      "height": 32,
                      "width": 32,
                    },
                    undefined,
                  ]
                }
              />
            </View>
          </View>
        </View>
      </View>
      <View
        style={
          {
            "height": 270,
            "justifyContent": "flex-start",
          }
        }
      >
        <View
          accessibilityLabel="forceLoginViaBrowser"
          accessibilityRole="button"
          accessibilityState={
            {
              "busy": undefined,
              "checked": undefined,
              "disabled": undefined,
              "expanded": undefined,
              "selected": undefined,
            }
          }
          accessibilityValue={
            {
              "max": undefined,
              "min": undefined,
              "now": undefined,
              "text": undefined,
            }
          }
          accessible={true}
          collapsable={false}
          focusable={true}
          onClick={[Function]}
          onResponderGrant={[Function]}
          onResponderMove={[Function]}
          onResponderRelease={[Function]}
          onResponderTerminate={[Function]}
          onResponderTerminationRequest={[Function]}
          onStartShouldSetResponder={[Function]}
          style={
            {
              "opacity": 1,
            }
          }
          testID="forceLoginViaBrowser"
        >
          <View
            style={
              [
                {},
              ]
            }
          >
            <Text
              style={
                [
                  {
                    "color": "#007AFF",
                    "fontSize": 18,
                    "margin": 8,
                    "textAlign": "center",
                  },
                  {
                    "color": "#000",
                  },
                ]
              }
            >
              Force log in via browser
            </Text>
          </View>
        </View>
        <View
          accessibilityLabel="logoutViaBrowser"
          accessibilityRole="button"
          accessibilityState={
            {
              "busy": undefined,
              "checked": undefined,
              "disabled": undefined,
              "expanded": undefined,
              "selected": undefined,
            }
          }
          accessibilityValue={
            {
              "max": undefined,
              "min": undefined,
              "now": undefined,
              "text": undefined,
            }
          }
          accessible={true}
          collapsable={false}
          focusable={true}
          onClick={[Function]}
          onResponderGrant={[Function]}
          onResponderMove={[Function]}
          onResponderRelease={[Function]}
          onResponderTerminate={[Function]}
          onResponderTerminationRequest={[Function]}
          onStartShouldSetResponder={[Function]}
          style={
            {
              "opacity": 1,
            }
          }
          testID="logoutViaBrowser"
        >
          <View
            style={
              [
                {},
              ]
            }
          >
            <Text
              style={
                [
                  {
                    "color": "#007AFF",
                    "fontSize": 18,
                    "margin": 8,
                    "textAlign": "center",
                  },
                  {
                    "color": "#000",
                  },
                ]
              }
            >
              Logout via browser
            </Text>
          </View>
        </View>
        <View
          accessibilityLabel="login"
          accessibilityRole="button"
          accessibilityState={
            {
              "busy": undefined,
              "checked": undefined,
              "disabled": undefined,
              "expanded": undefined,
              "selected": undefined,
            }
          }
          accessibilityValue={
            {
              "max": undefined,
              "min": undefined,
              "now": undefined,
              "text": undefined,
            }
          }
          accessible={true}
          collapsable={false}
          focusable={true}
          onClick={[Function]}
          onResponderGrant={[Function]}
          onResponderMove={[Function]}
          onResponderRelease={[Function]}
          onResponderTerminate={[Function]}
          onResponderTerminationRequest={[Function]}
          onStartShouldSetResponder={[Function]}
          style={
            {
              "opacity": 1,
            }
          }
          testID="login"
        >
          <View
            style={
              [
                {},
              ]
            }
          >
            <Text
              style={
                [
                  {
                    "color": "#007AFF",
                    "fontSize": 18,
                    "margin": 8,
                    "textAlign": "center",
                  },
                  {
                    "color": "#000",
                  },
                ]
              }
            >
              Log in
            </Text>
          </View>
        </View>
        <View
          accessibilityLabel="forceLogin"
          accessibilityRole="button"
          accessibilityState={
            {
              "busy": undefined,
              "checked": undefined,
              "disabled": undefined,
              "expanded": undefined,
              "selected": undefined,
            }
          }
          accessibilityValue={
            {
              "max": undefined,
              "min": undefined,
              "now": undefined,
              "text": undefined,
            }
          }
          accessible={true}
          collapsable={false}
          focusable={true}
          onClick={[Function]}
          onResponderGrant={[Function]}
          onResponderMove={[Function]}
          onResponderRelease={[Function]}
          onResponderTerminate={[Function]}
          onResponderTerminationRequest={[Function]}
          onStartShouldSetResponder={[Function]}
          style={
            {
              "opacity": 1,
            }
          }
          testID="forceLogin"
        >
          <View
            style={
              [
                {},
              ]
            }
          >
            <Text
              style={
                [
                  {
                    "color": "#007AFF",
                    "fontSize": 18,
                    "margin": 8,
                    "textAlign": "center",
                  },
                  {
                    "color": "#000",
                  },
                ]
              }
            >
              Force log in
            </Text>
          </View>
        </View>
        <View
          accessibilityLabel="logOut"
          accessibilityRole="button"
          accessibilityState={
            {
              "busy": undefined,
              "checked": undefined,
              "disabled": undefined,
              "expanded": undefined,
              "selected": undefined,
            }
          }
          accessibilityValue={
            {
              "max": undefined,
              "min": undefined,
              "now": undefined,
              "text": undefined,
            }
          }
          accessible={true}
          collapsable={false}
          focusable={true}
          onClick={[Function]}
          onResponderGrant={[Function]}
          onResponderMove={[Function]}
          onResponderRelease={[Function]}
          onResponderTerminate={[Function]}
          onResponderTerminationRequest={[Function]}
          onStartShouldSetResponder={[Function]}
          style={
            {
              "opacity": 1,
            }
          }
          testID="logOut"
        >
          <View
            style={
              [
                {},
              ]
            }
          >
            <Text
              style={
                [
                  {
                    "color": "#007AFF",
                    "fontSize": 18,
                    "margin": 8,
                    "textAlign": "center",
                  },
                  {
                    "color": "#000",
                  },
                ]
              }
            >
              Log out
            </Text>
          </View>
        </View>
      </View>
    </View>
  </View>
</RCTScrollView>
`;
